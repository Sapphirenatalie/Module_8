def personal_sum(numbers):
    correct_data = 0
    incorrect_data = 0
    result = 0

    for item in numbers:

        try:
            result += item
            correct_data += 1

        except TypeError:
            incorrect_data += 1

            print(f'{incorrect_data} Некорректный тип данных для подсчёта суммы ->> {item}')
    print(f'(некорректный тип данных: {incorrect_data}, правильный тип данных: {correct_data})')
    print(f'сумма найденных чисел: {result}')

    return result, incorrect_data, correct_data


def calculate_average(numbers):
    incorrect_data = 0
    try:
        result2 = personal_sum(numbers)
        avg = result2[0] / result2[2]
        return f'среднее арифметическое {avg}'

    except TypeError:
        incorrect_data += 1
        print(f'{incorrect_data} В numbers записан некорректный тип данных ->> {numbers}')
    except ZeroDivisionError:
        return 0


print(f'Результат 1: {calculate_average("1, 2, 3")}')
print('-------------------------')
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')
print('-------------------------')
print(f'Результат 3: {calculate_average(567)}')
print('-------------------------')
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')


# # Вывод на консоль:
# Некорректный тип данных для подсчёта суммы - 1
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 2
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 3
# Результат 1: 0
# Некорректный тип данных для подсчёта суммы - Строка
# Некорректный тип данных для подсчёта суммы - Ещё Строка
# Результат 2: 2.0
# В numbers записан некорректный тип данных
# Результат 3: None
# Результат 4: 26.5

# Сложные моменты и исключения в стеке вызовов функции
# Напишите 2 функции:
# Функция personal_sum(numbers):
# Должна принимать коллекцию numbers.
# Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
# Если же при переборе встречается данное типа отличного от числового,
# то обработать исключение TypeError, увеличив счётчик incorrect_data на 1.
# В конечном итоге функция возвращает кортеж из двух значений:
# result - сумма чисел, incorrect_data - кол-во некорректных данных.
# Функция calculate_average(numbers)
# Среднее арифметическое - сумма всех данных делённая на их количество.
# Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
# Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
# Т.к. коллекция numbers может оказаться пустой,
# то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
# Также в numbers может быть записана не коллекция, а другие типы данных, например числа.
# Обработайте исключение TypeError выводя строку 'В numbers записан некорректный тип данных'.
# В таком случае функция просто вернёт None.
# Пункты задачи:
# Создайте функцию personal_sum на основе условий задачи.
# Создайте функцию calculate_average на основе условий задачи.
# Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
# Пример результата выполнения программы:
# Пример выполнения программы:
# print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
# print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
# print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
# print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать

# Вывод на консоль:
# Некорректный тип данных для подсчёта суммы - 1
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 2
# Некорректный тип данных для подсчёта суммы - ,
# Некорректный тип данных для подсчёта суммы -
# Некорректный тип данных для подсчёта суммы - 3
# Результат 1: 0
# Некорректный тип данных для подсчёта суммы - Строка
# Некорректный тип данных для подсчёта суммы - Ещё Строка
# Результат 2: 2.0
# В numbers записан некорректный тип данных
# Результат 3: None
# Результат 4: 26.5

# Примечания:
# Подробнее о типах исключений https://docs.python.org/3/tutorial/errors.html.
